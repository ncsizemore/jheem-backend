service: jheem-backend

provider:
  name: aws
  runtime: python3.9
  region: us-east-1
  stage: ${opt:stage, 'dev'}
  
  # Environment variables for our Lambda functions
  environment:
    S3_BUCKET_NAME: ${self:custom.bucketName}
    S3_ENDPOINT_URL: http://host.docker.internal:4566
    AWS_ACCESS_KEY_ID: test
    AWS_SECRET_ACCESS_KEY: test
  
  # For LocalStack deployment
  # Remove the profile line and let serverless-localstack handle credentials

plugins:
  - serverless-localstack
  - serverless-offline

custom:
  # LocalStack configuration
  localstack:
    stages:
      - local
    host: http://localhost
    edgePort: 4566
    autostart: false  # We'll start LocalStack manually
  
  # Bucket name (will be created in LocalStack)
  bucketName: prerun-plots-bucket-${self:provider.stage}

functions:
  getPrerunPlot:
    handler: src/handlers/plot_retrieval.get_plot
    events:
      - http:
          path: plot
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
            allowCredentials: false
    environment:
      S3_BUCKET_NAME: ${self:custom.bucketName}

  searchPlots:
    handler: src/handlers/plot_discovery.search_plots
    events:
      - http:
          path: plots/search
          method: get
          cors:
            origin: '*'
            headers:
              - Content-Type
            allowCredentials: false
    environment:
      DYNAMODB_ENDPOINT_URL: http://host.docker.internal:4566
      
  registerPlot:
    handler: src/handlers/plot_discovery.register_plot
    events:
      - http:
          path: plots/register
          method: post
          cors:
            origin: '*'
            headers:
              - Content-Type
            allowCredentials: false
    environment:
      DYNAMODB_ENDPOINT_URL: http://host.docker.internal:4566

resources:
  Resources:
    # S3 bucket for storing plot JSON files
    PlotsBucket:
      Type: AWS::S3::Bucket
      Properties:
        BucketName: ${self:custom.bucketName}
