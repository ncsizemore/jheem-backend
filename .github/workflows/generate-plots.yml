name: Generate JHEEM Plots

on:
  workflow_dispatch:
    inputs:
      config_type:
        description: 'Configuration type'
        required: true
        default: 'test'
        type: choice
        options:
        - test
        - medium
        - full
      max_parallel:
        description: 'Maximum parallel jobs'
        required: true
        default: '2'
        type: string
      
jobs:
  # First job: Generate configuration and prepare simulation data
  prepare:
    runs-on: ubuntu-latest
    outputs:
      cities: ${{ steps.config.outputs.cities }}
      total_plots: ${{ steps.config.outputs.total_plots }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'
          
      - name: Install Python dependencies
        run: |
          pip install pyyaml argparse
          
      - name: Generate orchestration configuration
        id: config
        run: |
          cd scripts
          python generate_orchestration_config.py --type ${{ github.event.inputs.config_type }}
          
          # Extract cities list for matrix strategy
          python -c "
          import yaml
          with open('../orchestration_configs/master_config_${{ github.event.inputs.config_type }}.yaml', 'r') as f:
              config = yaml.safe_load(f)
          cities = [job['city'] for job in config['jobs']]
          total_plots = config['total_expected_plots']
          print(f'cities={cities}'.replace(\"'\", '\"'))
          print(f'total_plots={total_plots}')
          " >> $GITHUB_OUTPUT
          
      - name: Upload configuration artifacts
        uses: actions/upload-artifact@v3
        with:
          name: orchestration-config
          path: orchestration_configs/

  # Second job: Generate plots per city (matrix strategy)
  generate-plots:
    needs: prepare
    runs-on: ubuntu-latest
    strategy:
      matrix:
        city: ${{ fromJson(needs.prepare.outputs.cities) }}
      max-parallel: ${{ fromJson(github.event.inputs.max_parallel) }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Verify AWS connection
        run: |
          echo "üîê Testing AWS connection..."
          aws sts get-caller-identity
          echo "‚úÖ AWS connection successful"
          
      - name: Download configuration
        uses: actions/download-artifact@v3
        with:
          name: orchestration-config
          path: orchestration_configs/
          
      - name: Generate test plots for city
        run: |
          echo "üèôÔ∏è Generating test plots for city: ${{ matrix.city }}"
          
          # Create test plot data (simulating what R script would generate)
          mkdir -p plots
          
          # Generate 5 test plots per city (keeping it small for Phase 1)
          for i in {1..5}; do
            plot_file="plots/${{ matrix.city }}_test_plot_${i}.json"
            
            # Create realistic plot JSON structure
            cat > "$plot_file" << EOF
          {
            "data": [
              {
                "x": [2020, 2021, 2022, 2023, 2024, 2025],
                "y": [100, 95, 88, 82, 76, 70],
                "type": "scatter",
                "mode": "lines+markers",
                "name": "Test Data"
              }
            ],
            "layout": {
              "title": "Test Plot $i for ${{ matrix.city }}",
              "xaxis": {"title": "Year"},
              "yaxis": {"title": "Value"},
              "showlegend": true
            },
            "metadata": {
              "city": "${{ matrix.city }}",
              "scenario": "test_scenario",
              "outcome": "test_outcome_${i}",
              "statistic": "mean.and.interval",
              "facet": "none",
              "generated_by": "github_actions",
              "timestamp": "$(date -u +%Y-%m-%dT%H:%M:%SZ)"
            }
          }
          EOF
            
            echo "üìä Generated test plot: $plot_file"
          done
          
      - name: Upload plots to S3
        run: |
          echo "üì§ Uploading plots to S3..."
          
          # Upload each plot file to S3
          for plot_file in plots/*.json; do
            if [[ -f "$plot_file" ]]; then
              filename=$(basename "$plot_file")
              s3_key="github_actions_test/${{ matrix.city }}/${filename}"
              
              echo "üì§ Uploading: $plot_file ‚Üí s3://jheem-test-tiny-bucket/$s3_key"
              aws s3 cp "$plot_file" "s3://jheem-test-tiny-bucket/$s3_key" \
                --metadata "city=${{ matrix.city }},source=github_actions,timestamp=$(date -u +%Y-%m-%dT%H:%M:%SZ)"
                
              if [[ $? -eq 0 ]]; then
                echo "‚úÖ Successfully uploaded: $s3_key"
              else
                echo "‚ùå Failed to upload: $s3_key"
                exit 1
              fi
            fi
          done
          
      - name: Register plots in DynamoDB
        run: |
          echo "üìã Registering plot metadata in DynamoDB..."
          
          # Register each plot in DynamoDB
          for plot_file in plots/*.json; do
            if [[ -f "$plot_file" ]]; then
              filename=$(basename "$plot_file")
              s3_key="github_actions_test/${{ matrix.city }}/${filename}"
              file_size=$(stat -c%s "$plot_file" 2>/dev/null || stat -f%z "$plot_file")
              plot_id="gh_${{ matrix.city }}_$(echo $filename | sed 's/.json$//')"
              
              echo "üìã Registering: $plot_id"
              
              # Create DynamoDB item
              aws dynamodb put-item \
                --table-name jheem-test-tiny \
                --item "{
                  \"city\": {\"S\": \"${{ matrix.city }}\"},
                  \"plot_id\": {\"S\": \"$plot_id\"},
                  \"scenario\": {\"S\": \"github_actions_test\"},
                  \"outcome\": {\"S\": \"test_outcome\"},
                  \"s3_key\": {\"S\": \"$s3_key\"},
                  \"file_size\": {\"N\": \"$file_size\"},
                  \"source\": {\"S\": \"github_actions\"},
                  \"created_at\": {\"S\": \"$(date -u +%Y-%m-%dT%H:%M:%SZ)\"}
                }"
                
              if [[ $? -eq 0 ]]; then
                echo "‚úÖ Successfully registered: $plot_id"
              else
                echo "‚ùå Failed to register: $plot_id"
                exit 1
              fi
            fi
          done
          
      - name: Verify uploads
        run: |
          echo "üîç Verifying uploads..."
          
          # List uploaded files in S3
          echo "üìÅ S3 files for ${{ matrix.city }}:"
          aws s3 ls "s3://jheem-test-tiny-bucket/github_actions_test/${{ matrix.city }}/" || echo "No files found"
          
          # Query DynamoDB for registered plots
          echo "üìä DynamoDB records for ${{ matrix.city }}:"
          aws dynamodb query \
            --table-name jheem-test-tiny \
            --key-condition-expression "city = :city" \
            --expression-attribute-values "{\":city\":{\"S\":\"${{ matrix.city }}\"}}" \
            --query "Items[?contains(plot_id.S, 'gh_')].[plot_id.S, s3_key.S]" \
            --output table || echo "No records found"
            
      - name: Report completion
        run: |
          echo "‚úÖ City ${{ matrix.city }} completed successfully"
          echo "üìä Generated and uploaded 5 test plots"
          echo "üìã Registered 5 metadata records in DynamoDB"
          echo "üíæ Files stored under: github_actions_test/${{ matrix.city }}/"
          
  # Third job: Summarize results
  summarize:
    needs: [prepare, generate-plots]
    runs-on: ubuntu-latest
    if: always()
    steps:
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-east-1
          
      - name: Generate summary
        run: |
          echo "üéØ JHEEM Plot Generation Summary"
          echo "================================"
          echo "Configuration: ${{ github.event.inputs.config_type }}"
          echo "Total expected plots: ${{ needs.prepare.outputs.total_plots }}"
          echo "Parallel jobs: ${{ github.event.inputs.max_parallel }}"
          echo ""
          echo "üìä AWS Integration Results:"
          
          # Count total files uploaded
          total_files=$(aws s3 ls s3://jheem-test-tiny-bucket/github_actions_test/ --recursive | wc -l || echo "0")
          echo "   - S3 files uploaded: $total_files"
          
          # Count total DynamoDB records
          total_records=$(aws dynamodb scan \
            --table-name jheem-test-tiny \
            --filter-expression "contains(plot_id, :prefix)" \
            --expression-attribute-values '{":prefix":{"S":"gh_"}}' \
            --select COUNT \
            --query "Count" --output text || echo "0")
          echo "   - DynamoDB records: $total_records"
          
          echo ""
          echo "‚úÖ AWS integration test complete!"
          echo "üîó View results in AWS Console:"
          echo "   - S3: https://console.aws.amazon.com/s3/buckets/jheem-test-tiny-bucket"
          echo "   - DynamoDB: https://console.aws.amazon.com/dynamodb/"
